// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exhook.proto

package com.thpower.emqx.java;

/**
 * Protobuf type {@code emqx.exhook.v2.Message}
 */
public final class Message extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:emqx.exhook.v2.Message)
    MessageOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Message.newBuilder() to construct.
  private Message(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Message() {
    node_ = "";
    id_ = "";
    from_ = "";
    topic_ = "";
    payload_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Message();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Message(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            node_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            id_ = s;
            break;
          }
          case 24: {

            qos_ = input.readUInt32();
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            from_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            topic_ = s;
            break;
          }
          case 50: {

            payload_ = input.readBytes();
            break;
          }
          case 56: {

            timestamp_ = input.readUInt64();
            break;
          }
          case 66: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              headers_ = com.google.protobuf.MapField.newMapField(
                  HeadersDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            headers__ = input.readMessage(
                HeadersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            headers_.getMutableMap().put(
                headers__.getKey(), headers__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.thpower.emqx.java.EmqxExHookProto.internal_static_emqx_exhook_v2_Message_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 8:
        return internalGetHeaders();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.thpower.emqx.java.EmqxExHookProto.internal_static_emqx_exhook_v2_Message_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.thpower.emqx.java.Message.class, com.thpower.emqx.java.Message.Builder.class);
  }

  public static final int NODE_FIELD_NUMBER = 1;
  private volatile java.lang.Object node_;
  /**
   * <code>string node = 1;</code>
   * @return The node.
   */
  @java.lang.Override
  public java.lang.String getNode() {
    java.lang.Object ref = node_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      node_ = s;
      return s;
    }
  }
  /**
   * <code>string node = 1;</code>
   * @return The bytes for node.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNodeBytes() {
    java.lang.Object ref = node_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      node_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ID_FIELD_NUMBER = 2;
  private volatile java.lang.Object id_;
  /**
   * <code>string id = 2;</code>
   * @return The id.
   */
  @java.lang.Override
  public java.lang.String getId() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      id_ = s;
      return s;
    }
  }
  /**
   * <code>string id = 2;</code>
   * @return The bytes for id.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIdBytes() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      id_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int QOS_FIELD_NUMBER = 3;
  private int qos_;
  /**
   * <code>uint32 qos = 3;</code>
   * @return The qos.
   */
  @java.lang.Override
  public int getQos() {
    return qos_;
  }

  public static final int FROM_FIELD_NUMBER = 4;
  private volatile java.lang.Object from_;
  /**
   * <code>string from = 4;</code>
   * @return The from.
   */
  @java.lang.Override
  public java.lang.String getFrom() {
    java.lang.Object ref = from_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      from_ = s;
      return s;
    }
  }
  /**
   * <code>string from = 4;</code>
   * @return The bytes for from.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getFromBytes() {
    java.lang.Object ref = from_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      from_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TOPIC_FIELD_NUMBER = 5;
  private volatile java.lang.Object topic_;
  /**
   * <code>string topic = 5;</code>
   * @return The topic.
   */
  @java.lang.Override
  public java.lang.String getTopic() {
    java.lang.Object ref = topic_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      topic_ = s;
      return s;
    }
  }
  /**
   * <code>string topic = 5;</code>
   * @return The bytes for topic.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTopicBytes() {
    java.lang.Object ref = topic_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      topic_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PAYLOAD_FIELD_NUMBER = 6;
  private com.google.protobuf.ByteString payload_;
  /**
   * <code>bytes payload = 6;</code>
   * @return The payload.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPayload() {
    return payload_;
  }

  public static final int TIMESTAMP_FIELD_NUMBER = 7;
  private long timestamp_;
  /**
   * <code>uint64 timestamp = 7;</code>
   * @return The timestamp.
   */
  @java.lang.Override
  public long getTimestamp() {
    return timestamp_;
  }

  public static final int HEADERS_FIELD_NUMBER = 8;
  private static final class HeadersDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.thpower.emqx.java.EmqxExHookProto.internal_static_emqx_exhook_v2_Message_HeadersEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> headers_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetHeaders() {
    if (headers_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          HeadersDefaultEntryHolder.defaultEntry);
    }
    return headers_;
  }

  public int getHeadersCount() {
    return internalGetHeaders().getMap().size();
  }
  /**
   * <pre>
   * The key of header can be:
   *  - username:
   *    * Readonly
   *    * The username of sender client
   *    * Value type: utf8 string
   *  - protocol:
   *    * Readonly
   *    * The protocol name of sender client
   *    * Value type: string enum with "mqtt", "mqtt-sn", ...
   *  - peerhost:
   *    * Readonly
   *    * The peerhost of sender client
   *    * Value type: ip address string
   *  - allow_publish:
   *    * Writable
   *    * Whether to allow the message to be published by emqx
   *    * Value type: string enum with "true", "false", default is "true"
   * Notes: All header may be missing, which means that the message does not
   *   carry these headers. We can guarantee that clients coming from MQTT,
   *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
   *   carry these headers, but there is no guarantee that messages published
   *   by other means will do, e.g. messages published by HTTP-API
   * </pre>
   *
   * <code>map&lt;string, string&gt; headers = 8;</code>
   */

  @java.lang.Override
  public boolean containsHeaders(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetHeaders().getMap().containsKey(key);
  }
  /**
   * Use {@link #getHeadersMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getHeaders() {
    return getHeadersMap();
  }
  /**
   * <pre>
   * The key of header can be:
   *  - username:
   *    * Readonly
   *    * The username of sender client
   *    * Value type: utf8 string
   *  - protocol:
   *    * Readonly
   *    * The protocol name of sender client
   *    * Value type: string enum with "mqtt", "mqtt-sn", ...
   *  - peerhost:
   *    * Readonly
   *    * The peerhost of sender client
   *    * Value type: ip address string
   *  - allow_publish:
   *    * Writable
   *    * Whether to allow the message to be published by emqx
   *    * Value type: string enum with "true", "false", default is "true"
   * Notes: All header may be missing, which means that the message does not
   *   carry these headers. We can guarantee that clients coming from MQTT,
   *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
   *   carry these headers, but there is no guarantee that messages published
   *   by other means will do, e.g. messages published by HTTP-API
   * </pre>
   *
   * <code>map&lt;string, string&gt; headers = 8;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getHeadersMap() {
    return internalGetHeaders().getMap();
  }
  /**
   * <pre>
   * The key of header can be:
   *  - username:
   *    * Readonly
   *    * The username of sender client
   *    * Value type: utf8 string
   *  - protocol:
   *    * Readonly
   *    * The protocol name of sender client
   *    * Value type: string enum with "mqtt", "mqtt-sn", ...
   *  - peerhost:
   *    * Readonly
   *    * The peerhost of sender client
   *    * Value type: ip address string
   *  - allow_publish:
   *    * Writable
   *    * Whether to allow the message to be published by emqx
   *    * Value type: string enum with "true", "false", default is "true"
   * Notes: All header may be missing, which means that the message does not
   *   carry these headers. We can guarantee that clients coming from MQTT,
   *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
   *   carry these headers, but there is no guarantee that messages published
   *   by other means will do, e.g. messages published by HTTP-API
   * </pre>
   *
   * <code>map&lt;string, string&gt; headers = 8;</code>
   */
  @java.lang.Override

  public java.lang.String getHeadersOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetHeaders().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * The key of header can be:
   *  - username:
   *    * Readonly
   *    * The username of sender client
   *    * Value type: utf8 string
   *  - protocol:
   *    * Readonly
   *    * The protocol name of sender client
   *    * Value type: string enum with "mqtt", "mqtt-sn", ...
   *  - peerhost:
   *    * Readonly
   *    * The peerhost of sender client
   *    * Value type: ip address string
   *  - allow_publish:
   *    * Writable
   *    * Whether to allow the message to be published by emqx
   *    * Value type: string enum with "true", "false", default is "true"
   * Notes: All header may be missing, which means that the message does not
   *   carry these headers. We can guarantee that clients coming from MQTT,
   *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
   *   carry these headers, but there is no guarantee that messages published
   *   by other means will do, e.g. messages published by HTTP-API
   * </pre>
   *
   * <code>map&lt;string, string&gt; headers = 8;</code>
   */
  @java.lang.Override

  public java.lang.String getHeadersOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetHeaders().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNodeBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, node_);
    }
    if (!getIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, id_);
    }
    if (qos_ != 0) {
      output.writeUInt32(3, qos_);
    }
    if (!getFromBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, from_);
    }
    if (!getTopicBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, topic_);
    }
    if (!payload_.isEmpty()) {
      output.writeBytes(6, payload_);
    }
    if (timestamp_ != 0L) {
      output.writeUInt64(7, timestamp_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetHeaders(),
        HeadersDefaultEntryHolder.defaultEntry,
        8);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNodeBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, node_);
    }
    if (!getIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, id_);
    }
    if (qos_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(3, qos_);
    }
    if (!getFromBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, from_);
    }
    if (!getTopicBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, topic_);
    }
    if (!payload_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(6, payload_);
    }
    if (timestamp_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(7, timestamp_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetHeaders().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      headers__ = HeadersDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, headers__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.thpower.emqx.java.Message)) {
      return super.equals(obj);
    }
    com.thpower.emqx.java.Message other = (com.thpower.emqx.java.Message) obj;

    if (!getNode()
        .equals(other.getNode())) return false;
    if (!getId()
        .equals(other.getId())) return false;
    if (getQos()
        != other.getQos()) return false;
    if (!getFrom()
        .equals(other.getFrom())) return false;
    if (!getTopic()
        .equals(other.getTopic())) return false;
    if (!getPayload()
        .equals(other.getPayload())) return false;
    if (getTimestamp()
        != other.getTimestamp()) return false;
    if (!internalGetHeaders().equals(
        other.internalGetHeaders())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NODE_FIELD_NUMBER;
    hash = (53 * hash) + getNode().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId().hashCode();
    hash = (37 * hash) + QOS_FIELD_NUMBER;
    hash = (53 * hash) + getQos();
    hash = (37 * hash) + FROM_FIELD_NUMBER;
    hash = (53 * hash) + getFrom().hashCode();
    hash = (37 * hash) + TOPIC_FIELD_NUMBER;
    hash = (53 * hash) + getTopic().hashCode();
    hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
    hash = (53 * hash) + getPayload().hashCode();
    hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTimestamp());
    if (!internalGetHeaders().getMap().isEmpty()) {
      hash = (37 * hash) + HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetHeaders().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.thpower.emqx.java.Message parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.thpower.emqx.java.Message parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.thpower.emqx.java.Message parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.thpower.emqx.java.Message parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.thpower.emqx.java.Message parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.thpower.emqx.java.Message parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.thpower.emqx.java.Message parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.thpower.emqx.java.Message parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.thpower.emqx.java.Message parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.thpower.emqx.java.Message parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.thpower.emqx.java.Message parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.thpower.emqx.java.Message parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.thpower.emqx.java.Message prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code emqx.exhook.v2.Message}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:emqx.exhook.v2.Message)
      com.thpower.emqx.java.MessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.thpower.emqx.java.EmqxExHookProto.internal_static_emqx_exhook_v2_Message_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 8:
          return internalGetHeaders();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 8:
          return internalGetMutableHeaders();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.thpower.emqx.java.EmqxExHookProto.internal_static_emqx_exhook_v2_Message_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.thpower.emqx.java.Message.class, com.thpower.emqx.java.Message.Builder.class);
    }

    // Construct using com.thpower.emqx.java.Message.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      node_ = "";

      id_ = "";

      qos_ = 0;

      from_ = "";

      topic_ = "";

      payload_ = com.google.protobuf.ByteString.EMPTY;

      timestamp_ = 0L;

      internalGetMutableHeaders().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.thpower.emqx.java.EmqxExHookProto.internal_static_emqx_exhook_v2_Message_descriptor;
    }

    @java.lang.Override
    public com.thpower.emqx.java.Message getDefaultInstanceForType() {
      return com.thpower.emqx.java.Message.getDefaultInstance();
    }

    @java.lang.Override
    public com.thpower.emqx.java.Message build() {
      com.thpower.emqx.java.Message result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.thpower.emqx.java.Message buildPartial() {
      com.thpower.emqx.java.Message result = new com.thpower.emqx.java.Message(this);
      int from_bitField0_ = bitField0_;
      result.node_ = node_;
      result.id_ = id_;
      result.qos_ = qos_;
      result.from_ = from_;
      result.topic_ = topic_;
      result.payload_ = payload_;
      result.timestamp_ = timestamp_;
      result.headers_ = internalGetHeaders();
      result.headers_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.thpower.emqx.java.Message) {
        return mergeFrom((com.thpower.emqx.java.Message)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.thpower.emqx.java.Message other) {
      if (other == com.thpower.emqx.java.Message.getDefaultInstance()) return this;
      if (!other.getNode().isEmpty()) {
        node_ = other.node_;
        onChanged();
      }
      if (!other.getId().isEmpty()) {
        id_ = other.id_;
        onChanged();
      }
      if (other.getQos() != 0) {
        setQos(other.getQos());
      }
      if (!other.getFrom().isEmpty()) {
        from_ = other.from_;
        onChanged();
      }
      if (!other.getTopic().isEmpty()) {
        topic_ = other.topic_;
        onChanged();
      }
      if (other.getPayload() != com.google.protobuf.ByteString.EMPTY) {
        setPayload(other.getPayload());
      }
      if (other.getTimestamp() != 0L) {
        setTimestamp(other.getTimestamp());
      }
      internalGetMutableHeaders().mergeFrom(
          other.internalGetHeaders());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.thpower.emqx.java.Message parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.thpower.emqx.java.Message) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object node_ = "";
    /**
     * <code>string node = 1;</code>
     * @return The node.
     */
    public java.lang.String getNode() {
      java.lang.Object ref = node_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        node_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string node = 1;</code>
     * @return The bytes for node.
     */
    public com.google.protobuf.ByteString
        getNodeBytes() {
      java.lang.Object ref = node_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        node_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string node = 1;</code>
     * @param value The node to set.
     * @return This builder for chaining.
     */
    public Builder setNode(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      node_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string node = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNode() {
      
      node_ = getDefaultInstance().getNode();
      onChanged();
      return this;
    }
    /**
     * <code>string node = 1;</code>
     * @param value The bytes for node to set.
     * @return This builder for chaining.
     */
    public Builder setNodeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      node_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object id_ = "";
    /**
     * <code>string id = 2;</code>
     * @return The id.
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string id = 2;</code>
     * @return The bytes for id.
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string id = 2;</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      id_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      
      id_ = getDefaultInstance().getId();
      onChanged();
      return this;
    }
    /**
     * <code>string id = 2;</code>
     * @param value The bytes for id to set.
     * @return This builder for chaining.
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      id_ = value;
      onChanged();
      return this;
    }

    private int qos_ ;
    /**
     * <code>uint32 qos = 3;</code>
     * @return The qos.
     */
    @java.lang.Override
    public int getQos() {
      return qos_;
    }
    /**
     * <code>uint32 qos = 3;</code>
     * @param value The qos to set.
     * @return This builder for chaining.
     */
    public Builder setQos(int value) {
      
      qos_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 qos = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearQos() {
      
      qos_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object from_ = "";
    /**
     * <code>string from = 4;</code>
     * @return The from.
     */
    public java.lang.String getFrom() {
      java.lang.Object ref = from_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        from_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string from = 4;</code>
     * @return The bytes for from.
     */
    public com.google.protobuf.ByteString
        getFromBytes() {
      java.lang.Object ref = from_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        from_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string from = 4;</code>
     * @param value The from to set.
     * @return This builder for chaining.
     */
    public Builder setFrom(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      from_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string from = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearFrom() {
      
      from_ = getDefaultInstance().getFrom();
      onChanged();
      return this;
    }
    /**
     * <code>string from = 4;</code>
     * @param value The bytes for from to set.
     * @return This builder for chaining.
     */
    public Builder setFromBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      from_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object topic_ = "";
    /**
     * <code>string topic = 5;</code>
     * @return The topic.
     */
    public java.lang.String getTopic() {
      java.lang.Object ref = topic_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        topic_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string topic = 5;</code>
     * @return The bytes for topic.
     */
    public com.google.protobuf.ByteString
        getTopicBytes() {
      java.lang.Object ref = topic_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        topic_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string topic = 5;</code>
     * @param value The topic to set.
     * @return This builder for chaining.
     */
    public Builder setTopic(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      topic_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string topic = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearTopic() {
      
      topic_ = getDefaultInstance().getTopic();
      onChanged();
      return this;
    }
    /**
     * <code>string topic = 5;</code>
     * @param value The bytes for topic to set.
     * @return This builder for chaining.
     */
    public Builder setTopicBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      topic_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes payload = 6;</code>
     * @return The payload.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }
    /**
     * <code>bytes payload = 6;</code>
     * @param value The payload to set.
     * @return This builder for chaining.
     */
    public Builder setPayload(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      payload_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bytes payload = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearPayload() {
      
      payload_ = getDefaultInstance().getPayload();
      onChanged();
      return this;
    }

    private long timestamp_ ;
    /**
     * <code>uint64 timestamp = 7;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <code>uint64 timestamp = 7;</code>
     * @param value The timestamp to set.
     * @return This builder for chaining.
     */
    public Builder setTimestamp(long value) {
      
      timestamp_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint64 timestamp = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimestamp() {
      
      timestamp_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> headers_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetHeaders() {
      if (headers_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            HeadersDefaultEntryHolder.defaultEntry);
      }
      return headers_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableHeaders() {
      onChanged();;
      if (headers_ == null) {
        headers_ = com.google.protobuf.MapField.newMapField(
            HeadersDefaultEntryHolder.defaultEntry);
      }
      if (!headers_.isMutable()) {
        headers_ = headers_.copy();
      }
      return headers_;
    }

    public int getHeadersCount() {
      return internalGetHeaders().getMap().size();
    }
    /**
     * <pre>
     * The key of header can be:
     *  - username:
     *    * Readonly
     *    * The username of sender client
     *    * Value type: utf8 string
     *  - protocol:
     *    * Readonly
     *    * The protocol name of sender client
     *    * Value type: string enum with "mqtt", "mqtt-sn", ...
     *  - peerhost:
     *    * Readonly
     *    * The peerhost of sender client
     *    * Value type: ip address string
     *  - allow_publish:
     *    * Writable
     *    * Whether to allow the message to be published by emqx
     *    * Value type: string enum with "true", "false", default is "true"
     * Notes: All header may be missing, which means that the message does not
     *   carry these headers. We can guarantee that clients coming from MQTT,
     *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
     *   carry these headers, but there is no guarantee that messages published
     *   by other means will do, e.g. messages published by HTTP-API
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 8;</code>
     */

    @java.lang.Override
    public boolean containsHeaders(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetHeaders().getMap().containsKey(key);
    }
    /**
     * Use {@link #getHeadersMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getHeaders() {
      return getHeadersMap();
    }
    /**
     * <pre>
     * The key of header can be:
     *  - username:
     *    * Readonly
     *    * The username of sender client
     *    * Value type: utf8 string
     *  - protocol:
     *    * Readonly
     *    * The protocol name of sender client
     *    * Value type: string enum with "mqtt", "mqtt-sn", ...
     *  - peerhost:
     *    * Readonly
     *    * The peerhost of sender client
     *    * Value type: ip address string
     *  - allow_publish:
     *    * Writable
     *    * Whether to allow the message to be published by emqx
     *    * Value type: string enum with "true", "false", default is "true"
     * Notes: All header may be missing, which means that the message does not
     *   carry these headers. We can guarantee that clients coming from MQTT,
     *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
     *   carry these headers, but there is no guarantee that messages published
     *   by other means will do, e.g. messages published by HTTP-API
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 8;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getHeadersMap() {
      return internalGetHeaders().getMap();
    }
    /**
     * <pre>
     * The key of header can be:
     *  - username:
     *    * Readonly
     *    * The username of sender client
     *    * Value type: utf8 string
     *  - protocol:
     *    * Readonly
     *    * The protocol name of sender client
     *    * Value type: string enum with "mqtt", "mqtt-sn", ...
     *  - peerhost:
     *    * Readonly
     *    * The peerhost of sender client
     *    * Value type: ip address string
     *  - allow_publish:
     *    * Writable
     *    * Whether to allow the message to be published by emqx
     *    * Value type: string enum with "true", "false", default is "true"
     * Notes: All header may be missing, which means that the message does not
     *   carry these headers. We can guarantee that clients coming from MQTT,
     *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
     *   carry these headers, but there is no guarantee that messages published
     *   by other means will do, e.g. messages published by HTTP-API
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 8;</code>
     */
    @java.lang.Override

    public java.lang.String getHeadersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetHeaders().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The key of header can be:
     *  - username:
     *    * Readonly
     *    * The username of sender client
     *    * Value type: utf8 string
     *  - protocol:
     *    * Readonly
     *    * The protocol name of sender client
     *    * Value type: string enum with "mqtt", "mqtt-sn", ...
     *  - peerhost:
     *    * Readonly
     *    * The peerhost of sender client
     *    * Value type: ip address string
     *  - allow_publish:
     *    * Writable
     *    * Whether to allow the message to be published by emqx
     *    * Value type: string enum with "true", "false", default is "true"
     * Notes: All header may be missing, which means that the message does not
     *   carry these headers. We can guarantee that clients coming from MQTT,
     *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
     *   carry these headers, but there is no guarantee that messages published
     *   by other means will do, e.g. messages published by HTTP-API
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 8;</code>
     */
    @java.lang.Override

    public java.lang.String getHeadersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetHeaders().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearHeaders() {
      internalGetMutableHeaders().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * The key of header can be:
     *  - username:
     *    * Readonly
     *    * The username of sender client
     *    * Value type: utf8 string
     *  - protocol:
     *    * Readonly
     *    * The protocol name of sender client
     *    * Value type: string enum with "mqtt", "mqtt-sn", ...
     *  - peerhost:
     *    * Readonly
     *    * The peerhost of sender client
     *    * Value type: ip address string
     *  - allow_publish:
     *    * Writable
     *    * Whether to allow the message to be published by emqx
     *    * Value type: string enum with "true", "false", default is "true"
     * Notes: All header may be missing, which means that the message does not
     *   carry these headers. We can guarantee that clients coming from MQTT,
     *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
     *   carry these headers, but there is no guarantee that messages published
     *   by other means will do, e.g. messages published by HTTP-API
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 8;</code>
     */

    public Builder removeHeaders(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableHeaders().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableHeaders() {
      return internalGetMutableHeaders().getMutableMap();
    }
    /**
     * <pre>
     * The key of header can be:
     *  - username:
     *    * Readonly
     *    * The username of sender client
     *    * Value type: utf8 string
     *  - protocol:
     *    * Readonly
     *    * The protocol name of sender client
     *    * Value type: string enum with "mqtt", "mqtt-sn", ...
     *  - peerhost:
     *    * Readonly
     *    * The peerhost of sender client
     *    * Value type: ip address string
     *  - allow_publish:
     *    * Writable
     *    * Whether to allow the message to be published by emqx
     *    * Value type: string enum with "true", "false", default is "true"
     * Notes: All header may be missing, which means that the message does not
     *   carry these headers. We can guarantee that clients coming from MQTT,
     *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
     *   carry these headers, but there is no guarantee that messages published
     *   by other means will do, e.g. messages published by HTTP-API
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 8;</code>
     */
    public Builder putHeaders(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableHeaders().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * The key of header can be:
     *  - username:
     *    * Readonly
     *    * The username of sender client
     *    * Value type: utf8 string
     *  - protocol:
     *    * Readonly
     *    * The protocol name of sender client
     *    * Value type: string enum with "mqtt", "mqtt-sn", ...
     *  - peerhost:
     *    * Readonly
     *    * The peerhost of sender client
     *    * Value type: ip address string
     *  - allow_publish:
     *    * Writable
     *    * Whether to allow the message to be published by emqx
     *    * Value type: string enum with "true", "false", default is "true"
     * Notes: All header may be missing, which means that the message does not
     *   carry these headers. We can guarantee that clients coming from MQTT,
     *   MQTT-SN, CoAP, LwM2M and other natively supported protocol clients will
     *   carry these headers, but there is no guarantee that messages published
     *   by other means will do, e.g. messages published by HTTP-API
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 8;</code>
     */

    public Builder putAllHeaders(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableHeaders().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:emqx.exhook.v2.Message)
  }

  // @@protoc_insertion_point(class_scope:emqx.exhook.v2.Message)
  private static final com.thpower.emqx.java.Message DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.thpower.emqx.java.Message();
  }

  public static com.thpower.emqx.java.Message getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Message>
      PARSER = new com.google.protobuf.AbstractParser<Message>() {
    @java.lang.Override
    public Message parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Message(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Message> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Message> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.thpower.emqx.java.Message getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

